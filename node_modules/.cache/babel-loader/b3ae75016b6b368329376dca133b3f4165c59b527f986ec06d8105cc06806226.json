{"ast":null,"code":"const STORAGE_KEY = 'crypto_price_predictor_rooms';\nconst getRooms = () => {\n  const rooms = localStorage.getItem(STORAGE_KEY);\n  return rooms ? JSON.parse(rooms) : {};\n};\nconst saveRooms = rooms => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(rooms));\n};\nexport const createRoom = (roomCode, playerName, selectedCrypto) => {\n  const rooms = getRooms();\n  rooms[roomCode] = {\n    players: [{\n      name: playerName,\n      prediction: null\n    }],\n    started: false,\n    selectedCrypto: selectedCrypto,\n    startTime: null,\n    startPrice: null,\n    endTime: null,\n    endPrice: null\n  };\n  saveRooms(rooms);\n};\nexport const joinRoom = (roomCode, playerName) => {\n  const rooms = getRooms();\n  if (rooms[roomCode] && !rooms[roomCode].started) {\n    rooms[roomCode].players.push({\n      name: playerName,\n      prediction: null\n    });\n    saveRooms(rooms);\n    return true;\n  }\n  return false;\n};\nexport const getRoomPlayers = roomCode => {\n  const rooms = getRooms();\n  return rooms[roomCode] ? rooms[roomCode].players : null;\n};\nexport const getRoomData = roomCode => {\n  const rooms = getRooms();\n  return rooms[roomCode] || null;\n};\nexport const updatePlayerPrediction = (roomCode, playerName, prediction) => {\n  const rooms = getRooms();\n  if (rooms[roomCode]) {\n    const playerIndex = rooms[roomCode].players.findIndex(p => p.name === playerName);\n    if (playerIndex !== -1) {\n      rooms[roomCode].players[playerIndex].prediction = prediction;\n      saveRooms(rooms);\n    }\n  }\n};\nexport const startGame = (roomCode, startTimestamp, startPrice) => {\n  const rooms = getRooms();\n  if (rooms[roomCode]) {\n    rooms[roomCode].started = true;\n    rooms[roomCode].startTime = startTimestamp;\n    rooms[roomCode].startPrice = startPrice;\n    saveRooms(rooms);\n  }\n};\nexport const endGame = (roomCode, endTimestamp, endPrice, winningPlayer) => {\n  const rooms = getRooms();\n  if (rooms[roomCode]) {\n    rooms[roomCode].endTime = endTimestamp;\n    rooms[roomCode].endPrice = endPrice;\n    rooms[roomCode].winner = winningPlayer;\n    saveRooms(rooms);\n  }\n};\nexport const getSelectedCrypto = roomCode => {\n  const rooms = getRooms();\n  return rooms[roomCode] ? rooms[roomCode].selectedCrypto : null;\n};\nexport const fetchCryptocurrencies = async () => {\n  try {\n    const response = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false');\n    const data = await response.json();\n    return data.map(crypto => ({\n      id: crypto.id,\n      name: crypto.name,\n      symbol: crypto.symbol,\n      image: crypto.image\n    }));\n  } catch (error) {\n    console.error('Error fetching cryptocurrencies:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["STORAGE_KEY","getRooms","rooms","localStorage","getItem","JSON","parse","saveRooms","setItem","stringify","createRoom","roomCode","playerName","selectedCrypto","players","name","prediction","started","startTime","startPrice","endTime","endPrice","joinRoom","push","getRoomPlayers","getRoomData","updatePlayerPrediction","playerIndex","findIndex","p","startGame","startTimestamp","endGame","endTimestamp","winningPlayer","winner","getSelectedCrypto","fetchCryptocurrencies","response","fetch","data","json","map","crypto","id","symbol","image","error","console"],"sources":["F:/crypto-chicken-run/src/services/roomService.js"],"sourcesContent":["const STORAGE_KEY = 'crypto_price_predictor_rooms';\r\n\r\nconst getRooms = () => {\r\n  const rooms = localStorage.getItem(STORAGE_KEY);\r\n  return rooms ? JSON.parse(rooms) : {};\r\n};\r\n\r\nconst saveRooms = (rooms) => {\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(rooms));\r\n};\r\n\r\nexport const createRoom = (roomCode, playerName, selectedCrypto) => {\r\n  const rooms = getRooms();\r\n  rooms[roomCode] = { \r\n    players: [{ name: playerName, prediction: null }], \r\n    started: false,\r\n    selectedCrypto: selectedCrypto,\r\n    startTime: null,\r\n    startPrice: null,\r\n    endTime: null,\r\n    endPrice: null\r\n  };\r\n  saveRooms(rooms);\r\n};\r\n\r\nexport const joinRoom = (roomCode, playerName) => {\r\n  const rooms = getRooms();\r\n  if (rooms[roomCode] && !rooms[roomCode].started) {\r\n    rooms[roomCode].players.push({ name: playerName, prediction: null });\r\n    saveRooms(rooms);\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getRoomPlayers = (roomCode) => {\r\n  const rooms = getRooms();\r\n  return rooms[roomCode] ? rooms[roomCode].players : null;\r\n};\r\n\r\nexport const getRoomData = (roomCode) => {\r\n  const rooms = getRooms();\r\n  return rooms[roomCode] || null;\r\n};\r\n\r\nexport const updatePlayerPrediction = (roomCode, playerName, prediction) => {\r\n  const rooms = getRooms();\r\n  if (rooms[roomCode]) {\r\n    const playerIndex = rooms[roomCode].players.findIndex(p => p.name === playerName);\r\n    if (playerIndex !== -1) {\r\n      rooms[roomCode].players[playerIndex].prediction = prediction;\r\n      saveRooms(rooms);\r\n    }\r\n  }\r\n};\r\n\r\nexport const startGame = (roomCode, startTimestamp, startPrice) => {\r\n  const rooms = getRooms();\r\n  if (rooms[roomCode]) {\r\n    rooms[roomCode].started = true;\r\n    rooms[roomCode].startTime = startTimestamp;\r\n    rooms[roomCode].startPrice = startPrice;\r\n    saveRooms(rooms);\r\n  }\r\n};\r\n\r\nexport const endGame = (roomCode, endTimestamp, endPrice, winningPlayer) => {\r\n  const rooms = getRooms();\r\n  if (rooms[roomCode]) {\r\n    rooms[roomCode].endTime = endTimestamp;\r\n    rooms[roomCode].endPrice = endPrice;\r\n    rooms[roomCode].winner = winningPlayer;\r\n    saveRooms(rooms);\r\n  }\r\n};\r\n\r\nexport const getSelectedCrypto = (roomCode) => {\r\n  const rooms = getRooms();\r\n  return rooms[roomCode] ? rooms[roomCode].selectedCrypto : null;\r\n};\r\n\r\nexport const fetchCryptocurrencies = async () => {\r\n  try {\r\n    const response = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false');\r\n    const data = await response.json();\r\n    return data.map(crypto => ({\r\n      id: crypto.id,\r\n      name: crypto.name,\r\n      symbol: crypto.symbol,\r\n      image: crypto.image,\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching cryptocurrencies:', error);\r\n    return [];\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}