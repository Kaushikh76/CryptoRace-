{"ast":null,"code":"var _jsxFileName = \"F:\\\\crypto-chicken-run\\\\src\\\\components\\\\CryptoChickenRace.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as roomService from '../services/roomService';\nimport WalletConnection from './WalletConnection';\nimport { parseEther, formatEther } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RACE_DURATION = 60000; // 60 seconds\nconst UPDATE_INTERVAL = 1000; // 1 second\nconst TRACK_LENGTH = 100;\nconst STAKE_AMOUNT = parseEther(\"0.001\"); // 0.001 ETH stake\n\nconst CryptoChickenRace = ({\n  roomCode,\n  playerName,\n  isHost\n}) => {\n  _s();\n  const [cryptos, setCryptos] = useState([]);\n  const [players, setPlayers] = useState([]);\n  const [raceStarted, setRaceStarted] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(RACE_DURATION / 1000);\n  const [account, setAccount] = useState(null);\n  const [library, setLibrary] = useState(null);\n  const [staked, setStaked] = useState(false);\n  useEffect(() => {\n    const fetchCryptos = async () => {\n      const fetchedCryptos = await roomService.fetchCryptocurrencies();\n      setCryptos(fetchedCryptos.map(crypto => ({\n        ...crypto,\n        position: 0,\n        startPrice: 0,\n        currentPrice: 0,\n        color: `#${Math.floor(Math.random() * 16777215).toString(16)}` // Random color\n      })));\n    };\n    fetchCryptos();\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const updatedPlayers = roomService.getRoomPlayers(roomCode);\n      if (updatedPlayers) {\n        setPlayers(updatedPlayers);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [roomCode]);\n  useEffect(() => {\n    if (raceStarted) {\n      const interval = setInterval(() => {\n        updatePrices();\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(interval);\n            endRace();\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, UPDATE_INTERVAL);\n      return () => clearInterval(interval);\n    }\n  }, [raceStarted]);\n  const handleConnect = (connectedAccount, connectedLibrary) => {\n    setAccount(connectedAccount);\n    setLibrary(connectedLibrary);\n  };\n  const stakeAmount = async () => {\n    if (!account || !library) {\n      alert(\"Please connect your wallet first\");\n      return;\n    }\n    try {\n      const signer = await library.getSigner();\n      const tx = await signer.sendTransaction({\n        to: roomCode,\n        // You should replace this with a secure contract address\n        value: STAKE_AMOUNT\n      });\n      await tx.wait();\n      setStaked(true);\n      roomService.updatePlayerStake(roomCode, playerName, true);\n    } catch (error) {\n      console.error(\"Error staking amount:\", error);\n      alert(\"Failed to stake amount. Please try again.\");\n    }\n  };\n  const startRace = async () => {\n    if (players.some(player => player.selection === null)) {\n      alert('All players must select a cryptocurrency before starting the race!');\n      return;\n    }\n    if (players.some(player => !player.staked)) {\n      alert('All players must stake before starting the race!');\n      return;\n    }\n    setRaceStarted(true);\n    setWinner(null);\n    setTimeLeft(RACE_DURATION / 1000);\n    roomService.startRace(roomCode);\n    await fetchInitialPrices();\n  };\n  const fetchInitialPrices = async () => {\n    const selectedCryptos = players.map(player => player.selection);\n    const ids = [...new Set(selectedCryptos)].join(',');\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd`);\n      const data = await response.json();\n      setCryptos(prevCryptos => prevCryptos.map(crypto => {\n        var _data$crypto$id, _data$crypto$id2;\n        return {\n          ...crypto,\n          position: 0,\n          startPrice: ((_data$crypto$id = data[crypto.id]) === null || _data$crypto$id === void 0 ? void 0 : _data$crypto$id.usd) || Math.random() * 1000,\n          currentPrice: ((_data$crypto$id2 = data[crypto.id]) === null || _data$crypto$id2 === void 0 ? void 0 : _data$crypto$id2.usd) || Math.random() * 1000\n        };\n      }));\n    } catch (error) {\n      console.error('Error fetching initial prices:', error);\n      setCryptos(prevCryptos => prevCryptos.map(crypto => ({\n        ...crypto,\n        position: 0,\n        startPrice: Math.random() * 1000,\n        currentPrice: Math.random() * 1000\n      })));\n    }\n  };\n  const updatePrices = () => {\n    setCryptos(prevCryptos => prevCryptos.map(crypto => {\n      if (players.some(player => player.selection === crypto.id)) {\n        const priceChange = (Math.random() - 0.5) * 2; // Random price change between -1% and 1%\n        const newPrice = crypto.currentPrice * (1 + priceChange / 100);\n        const totalChange = (newPrice - crypto.startPrice) / crypto.startPrice * 100;\n        const newPosition = Math.min(TRACK_LENGTH, Math.max(0, totalChange));\n        return {\n          ...crypto,\n          position: newPosition,\n          currentPrice: newPrice\n        };\n      }\n      return crypto;\n    }));\n  };\n  const endRace = async () => {\n    setRaceStarted(false);\n    const selectedCryptos = cryptos.filter(crypto => players.some(player => player.selection === crypto.id));\n    const winningCrypto = selectedCryptos.reduce((prev, current) => prev.position > current.position ? prev : current);\n    setWinner(winningCrypto);\n    const winningPlayers = players.filter(player => player.selection === winningCrypto.id);\n    if (winningPlayers.length > 0 && library) {\n      const totalStake = STAKE_AMOUNT.mul(players.length);\n      const winningShare = totalStake.div(winningPlayers.length);\n      for (const player of winningPlayers) {\n        try {\n          const signer = await library.getSigner();\n          const tx = await signer.sendTransaction({\n            to: player.account,\n            // Assuming player.account holds the Ethereum address\n            value: winningShare\n          });\n          await tx.wait();\n          console.log(`Paid ${formatEther(winningShare)} ETH to ${player.name}`);\n        } catch (error) {\n          console.error(`Error paying winner ${player.name}:`, error);\n        }\n      }\n    }\n    setPlayers(prevPlayers => prevPlayers.map(player => ({\n      ...player,\n      winner: player.selection === winningCrypto.id\n    })));\n  };\n  const selectCrypto = (playerName, cryptoId) => {\n    roomService.updatePlayerSelection(roomCode, playerName, cryptoId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center bg-gray-900 text-cyan-300\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-8 bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full border border-cyan-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-4xl font-bold mb-6 text-center text-cyan-400 animate-pulse\",\n        children: \"Crypto Race 2077\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletConnection, {\n        onConnect: handleConnect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 text-center\",\n        children: [\"Room Code: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-bold text-pink-500\",\n          children: roomCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 flex justify-center space-x-4\",\n        children: [!staked && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stakeAmount,\n          className: \"px-6 py-3 bg-yellow-600 text-white rounded-full hover:bg-yellow-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-yellow-500/50\",\n          children: \"Stake 0.001 ETH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), isHost && !raceStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startRace,\n          className: \"px-6 py-3 bg-pink-600 text-white rounded-full hover:bg-pink-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-pink-500/50\",\n          children: \"Initiate Race\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), raceStarted && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-2xl font-semibold text-yellow-400\",\n          children: [\"Time left: \", timeLeft, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 space-y-4\",\n        children: cryptos.filter(crypto => players.some(player => player.selection === crypto.id)).map(crypto => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-700 rounded-lg p-4 shadow-lg border border-cyan-700\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: crypto.image,\n              alt: crypto.name,\n              className: \"w-8 h-8 mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-24 font-semibold text-cyan-300\",\n              children: crypto.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-grow bg-gray-600 h-10 rounded-full relative overflow-hidden\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"h-full absolute top-0 left-0 flex items-center justify-center text-white font-bold rounded-full\",\n                style: {\n                  width: `${crypto.position}%`,\n                  backgroundColor: crypto.color,\n                  transition: 'width 1s linear'\n                },\n                children: crypto.symbol.toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-32 text-right font-mono text-green-400\",\n              children: [\"$\", crypto.currentPrice.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)\n        }, crypto.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold mb-2 text-pink-400\",\n          children: \"Racers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: players.map((player, index) => {\n            var _cryptos$find;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between bg-gray-700 p-2 rounded border border-pink-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-cyan-300\",\n                children: player.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this), !raceStarted && /*#__PURE__*/_jsxDEV(\"select\", {\n                value: player.selection || '',\n                onChange: e => selectCrypto(player.name, e.target.value),\n                disabled: playerName !== player.name,\n                className: \"p-1 border rounded bg-gray-800 text-cyan-300 border-cyan-500\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a crypto\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 21\n                }, this), cryptos.map(crypto => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: crypto.id,\n                  children: crypto.name\n                }, crypto.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this), raceStarted && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-yellow-400\",\n                children: player.selection ? (_cryptos$find = cryptos.find(c => c.id === player.selection)) === null || _cryptos$find === void 0 ? void 0 : _cryptos$find.name : 'Not selected'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this), winner && player.winner && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ml-2 text-2xl\",\n                children: \"\\uD83C\\uDFC6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 45\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-2xl font-bold text-center bg-yellow-600 text-black p-4 rounded-lg animate-pulse\",\n        children: [\"Champion Crypto: \", winner.name, \" (\", winner.symbol.toUpperCase(), \") \\uD83C\\uDFC6\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(CryptoChickenRace, \"E3txqLtIFic/ULuILHCiIZa2R6M=\");\n_c = CryptoChickenRace;\nexport default CryptoChickenRace;\nvar _c;\n$RefreshReg$(_c, \"CryptoChickenRace\");","map":{"version":3,"names":["React","useState","useEffect","roomService","WalletConnection","parseEther","formatEther","jsxDEV","_jsxDEV","RACE_DURATION","UPDATE_INTERVAL","TRACK_LENGTH","STAKE_AMOUNT","CryptoChickenRace","roomCode","playerName","isHost","_s","cryptos","setCryptos","players","setPlayers","raceStarted","setRaceStarted","winner","setWinner","timeLeft","setTimeLeft","account","setAccount","library","setLibrary","staked","setStaked","fetchCryptos","fetchedCryptos","fetchCryptocurrencies","map","crypto","position","startPrice","currentPrice","color","Math","floor","random","toString","interval","setInterval","updatedPlayers","getRoomPlayers","clearInterval","updatePrices","prevTime","endRace","handleConnect","connectedAccount","connectedLibrary","stakeAmount","alert","signer","getSigner","tx","sendTransaction","to","value","wait","updatePlayerStake","error","console","startRace","some","player","selection","fetchInitialPrices","selectedCryptos","ids","Set","join","response","fetch","data","json","prevCryptos","_data$crypto$id","_data$crypto$id2","id","usd","priceChange","newPrice","totalChange","newPosition","min","max","filter","winningCrypto","reduce","prev","current","winningPlayers","length","totalStake","mul","winningShare","div","log","name","prevPlayers","selectCrypto","cryptoId","updatePlayerSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onClick","src","image","alt","style","width","backgroundColor","transition","symbol","toUpperCase","toFixed","index","_cryptos$find","onChange","e","target","disabled","find","c","_c","$RefreshReg$"],"sources":["F:/crypto-chicken-run/src/components/CryptoChickenRace.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as roomService from '../services/roomService';\r\nimport WalletConnection from './WalletConnection';\r\nimport { parseEther, formatEther } from \"ethers\";\r\n\r\nconst RACE_DURATION = 60000; // 60 seconds\r\nconst UPDATE_INTERVAL = 1000; // 1 second\r\nconst TRACK_LENGTH = 100;\r\nconst STAKE_AMOUNT = parseEther(\"0.001\"); // 0.001 ETH stake\r\n\r\nconst CryptoChickenRace = ({ roomCode, playerName, isHost }) => {\r\n  const [cryptos, setCryptos] = useState([]);\r\n  const [players, setPlayers] = useState([]);\r\n  const [raceStarted, setRaceStarted] = useState(false);\r\n  const [winner, setWinner] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(RACE_DURATION / 1000);\r\n  const [account, setAccount] = useState(null);\r\n  const [library, setLibrary] = useState(null);\r\n  const [staked, setStaked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchCryptos = async () => {\r\n      const fetchedCryptos = await roomService.fetchCryptocurrencies();\r\n      setCryptos(fetchedCryptos.map(crypto => ({\r\n        ...crypto,\r\n        position: 0,\r\n        startPrice: 0,\r\n        currentPrice: 0,\r\n        color: `#${Math.floor(Math.random()*16777215).toString(16)}` // Random color\r\n      })));\r\n    };\r\n    fetchCryptos();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const updatedPlayers = roomService.getRoomPlayers(roomCode);\r\n      if (updatedPlayers) {\r\n        setPlayers(updatedPlayers);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [roomCode]);\r\n\r\n  useEffect(() => {\r\n    if (raceStarted) {\r\n      const interval = setInterval(() => {\r\n        updatePrices();\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            clearInterval(interval);\r\n            endRace();\r\n            return 0;\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n      }, UPDATE_INTERVAL);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [raceStarted]);\r\n\r\n  const handleConnect = (connectedAccount, connectedLibrary) => {\r\n    setAccount(connectedAccount);\r\n    setLibrary(connectedLibrary);\r\n  };\r\n\r\n  const stakeAmount = async () => {\r\n    if (!account || !library) {\r\n      alert(\"Please connect your wallet first\");\r\n      return;\r\n    }\r\n    try {\r\n      const signer = await library.getSigner();\r\n      const tx = await signer.sendTransaction({\r\n        to: roomCode, // You should replace this with a secure contract address\r\n        value: STAKE_AMOUNT\r\n      });\r\n      await tx.wait();\r\n      setStaked(true);\r\n      roomService.updatePlayerStake(roomCode, playerName, true);\r\n    } catch (error) {\r\n      console.error(\"Error staking amount:\", error);\r\n      alert(\"Failed to stake amount. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const startRace = async () => {\r\n    if (players.some(player => player.selection === null)) {\r\n      alert('All players must select a cryptocurrency before starting the race!');\r\n      return;\r\n    }\r\n    if (players.some(player => !player.staked)) {\r\n      alert('All players must stake before starting the race!');\r\n      return;\r\n    }\r\n    setRaceStarted(true);\r\n    setWinner(null);\r\n    setTimeLeft(RACE_DURATION / 1000);\r\n    roomService.startRace(roomCode);\r\n    await fetchInitialPrices();\r\n  };\r\n\r\n  const fetchInitialPrices = async () => {\r\n    const selectedCryptos = players.map(player => player.selection);\r\n    const ids = [...new Set(selectedCryptos)].join(',');\r\n    try {\r\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd`);\r\n      const data = await response.json();\r\n      \r\n      setCryptos(prevCryptos => \r\n        prevCryptos.map(crypto => ({\r\n          ...crypto,\r\n          position: 0,\r\n          startPrice: data[crypto.id]?.usd || Math.random() * 1000,\r\n          currentPrice: data[crypto.id]?.usd || Math.random() * 1000\r\n        }))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error fetching initial prices:', error);\r\n      setCryptos(prevCryptos => \r\n        prevCryptos.map(crypto => ({\r\n          ...crypto,\r\n          position: 0,\r\n          startPrice: Math.random() * 1000,\r\n          currentPrice: Math.random() * 1000\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const updatePrices = () => {\r\n    setCryptos(prevCryptos => \r\n      prevCryptos.map(crypto => {\r\n        if (players.some(player => player.selection === crypto.id)) {\r\n          const priceChange = (Math.random() - 0.5) * 2; // Random price change between -1% and 1%\r\n          const newPrice = crypto.currentPrice * (1 + priceChange / 100);\r\n          const totalChange = ((newPrice - crypto.startPrice) / crypto.startPrice) * 100;\r\n          const newPosition = Math.min(TRACK_LENGTH, Math.max(0, totalChange));\r\n          \r\n          return {\r\n            ...crypto,\r\n            position: newPosition,\r\n            currentPrice: newPrice,\r\n          };\r\n        }\r\n        return crypto;\r\n      })\r\n    );\r\n  };\r\n\r\n  const endRace = async () => {\r\n    setRaceStarted(false);\r\n    const selectedCryptos = cryptos.filter(crypto => \r\n      players.some(player => player.selection === crypto.id)\r\n    );\r\n    const winningCrypto = selectedCryptos.reduce((prev, current) => \r\n      (prev.position > current.position) ? prev : current\r\n    );\r\n    setWinner(winningCrypto);\r\n    \r\n    const winningPlayers = players.filter(player => player.selection === winningCrypto.id);\r\n    \r\n    if (winningPlayers.length > 0 && library) {\r\n      const totalStake = STAKE_AMOUNT.mul(players.length);\r\n      const winningShare = totalStake.div(winningPlayers.length);\r\n      \r\n      for (const player of winningPlayers) {\r\n        try {\r\n          const signer = await library.getSigner();\r\n          const tx = await signer.sendTransaction({\r\n            to: player.account, // Assuming player.account holds the Ethereum address\r\n            value: winningShare\r\n          });\r\n          await tx.wait();\r\n          console.log(`Paid ${formatEther(winningShare)} ETH to ${player.name}`);\r\n        } catch (error) {\r\n          console.error(`Error paying winner ${player.name}:`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    setPlayers(prevPlayers => \r\n      prevPlayers.map(player => ({\r\n        ...player,\r\n        winner: player.selection === winningCrypto.id\r\n      }))\r\n    );\r\n  };\r\n\r\n  const selectCrypto = (playerName, cryptoId) => {\r\n    roomService.updatePlayerSelection(roomCode, playerName, cryptoId);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-900 text-cyan-300\">\r\n      <div className=\"p-8 bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full border border-cyan-500\">\r\n        <h2 className=\"text-4xl font-bold mb-6 text-center text-cyan-400 animate-pulse\">Crypto Race 2077</h2>\r\n        <WalletConnection onConnect={handleConnect} />\r\n        <div className=\"mb-4 text-center\">Room Code: <span className=\"font-bold text-pink-500\">{roomCode}</span></div>\r\n        <div className=\"mb-6 flex justify-center space-x-4\">\r\n          {!staked && (\r\n            <button \r\n              onClick={stakeAmount} \r\n              className=\"px-6 py-3 bg-yellow-600 text-white rounded-full hover:bg-yellow-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-yellow-500/50\"\r\n            >\r\n              Stake 0.001 ETH\r\n            </button>\r\n          )}\r\n          {isHost && !raceStarted && (\r\n            <button \r\n              onClick={startRace} \r\n              className=\"px-6 py-3 bg-pink-600 text-white rounded-full hover:bg-pink-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-pink-500/50\"\r\n            >\r\n              Initiate Race\r\n            </button>\r\n          )}\r\n          {raceStarted && <span className=\"text-2xl font-semibold text-yellow-400\">Time left: {timeLeft}s</span>}\r\n        </div>\r\n        <div className=\"mb-6 space-y-4\">\r\n          {cryptos.filter(crypto => players.some(player => player.selection === crypto.id)).map((crypto) => (\r\n            <div key={crypto.id} className=\"bg-gray-700 rounded-lg p-4 shadow-lg border border-cyan-700\">\r\n              <div className=\"flex items-center\">\r\n                <img src={crypto.image} alt={crypto.name} className=\"w-8 h-8 mr-2\" />\r\n                <div className=\"w-24 font-semibold text-cyan-300\">{crypto.name}</div>\r\n                <div className=\"flex-grow bg-gray-600 h-10 rounded-full relative overflow-hidden\">\r\n                  <div\r\n                    className=\"h-full absolute top-0 left-0 flex items-center justify-center text-white font-bold rounded-full\"\r\n                    style={{\r\n                      width: `${crypto.position}%`,\r\n                      backgroundColor: crypto.color,\r\n                      transition: 'width 1s linear'\r\n                    }}\r\n                  >\r\n                    {crypto.symbol.toUpperCase()}\r\n                  </div>\r\n                </div>\r\n                <div className=\"w-32 text-right font-mono text-green-400\">\r\n                  ${crypto.currentPrice.toFixed(2)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"mb-6\">\r\n          <h3 className=\"text-xl font-bold mb-2 text-pink-400\">Racers</h3>\r\n          <div className=\"space-y-2\">\r\n            {players.map((player, index) => (\r\n              <div key={index} className=\"flex items-center justify-between bg-gray-700 p-2 rounded border border-pink-700\">\r\n                <span className=\"text-cyan-300\">{player.name}</span>\r\n                {!raceStarted && (\r\n                  <select\r\n                    value={player.selection || ''}\r\n                    onChange={(e) => selectCrypto(player.name, e.target.value)}\r\n                    disabled={playerName !== player.name}\r\n                    className=\"p-1 border rounded bg-gray-800 text-cyan-300 border-cyan-500\"\r\n                  >\r\n                    <option value=\"\">Select a crypto</option>\r\n                    {cryptos.map(crypto => (\r\n                      <option key={crypto.id} value={crypto.id}>{crypto.name}</option>\r\n                    ))}\r\n                  </select>\r\n                )}\r\n                {raceStarted && (\r\n                  <span className=\"text-yellow-400\">{player.selection ? cryptos.find(c => c.id === player.selection)?.name : 'Not selected'}</span>\r\n                )}\r\n                {winner && player.winner && <span className=\"ml-2 text-2xl\">🏆</span>}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        {winner && (\r\n          <div className=\"text-2xl font-bold text-center bg-yellow-600 text-black p-4 rounded-lg animate-pulse\">\r\n            Champion Crypto: {winner.name} ({winner.symbol.toUpperCase()}) 🏆\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CryptoChickenRace;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}