{"ast":null,"code":"var _jsxFileName = \"F:\\\\crypto-chicken-run\\\\src\\\\components\\\\CryptoChickenRace.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as roomService from '../services/roomService';\nimport WalletConnection from './WalletConnection';\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RACE_DURATION = 60000; // 60 seconds\nconst UPDATE_INTERVAL = 1000; // 1 second\nconst TRACK_LENGTH = 100;\nconst STAKE_AMOUNT = ethers.utils.parseEther(\"0.01\"); // 0.01 ETH stake\n\nconst CryptoChickenRace = ({\n  roomCode,\n  playerName,\n  isHost\n}) => {\n  _s();\n  const [cryptos, setCryptos] = useState([]);\n  const [players, setPlayers] = useState([]);\n  const [raceStarted, setRaceStarted] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(RACE_DURATION / 1000);\n  const [account, setAccount] = useState(null);\n  const [library, setLibrary] = useState(null);\n  const [staked, setStaked] = useState(false);\n  useEffect(() => {\n    const fetchCryptos = async () => {\n      const fetchedCryptos = await roomService.fetchCryptocurrencies();\n      setCryptos(fetchedCryptos.map(crypto => ({\n        ...crypto,\n        position: 0,\n        startPrice: 0,\n        currentPrice: 0,\n        color: `#${Math.floor(Math.random() * 16777215).toString(16)}` // Random color\n      })));\n    };\n    fetchCryptos();\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const updatedPlayers = roomService.getRoomPlayers(roomCode);\n      if (updatedPlayers) {\n        setPlayers(updatedPlayers);\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [roomCode]);\n  useEffect(() => {\n    if (raceStarted) {\n      const interval = setInterval(() => {\n        updatePrices();\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(interval);\n            endRace();\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, UPDATE_INTERVAL);\n      return () => clearInterval(interval);\n    }\n  }, [raceStarted]);\n  const handleConnect = (account, library) => {\n    setAccount(account);\n    setLibrary(library);\n  };\n  const stakeAmount = async () => {\n    if (!account || !library) {\n      alert(\"Please connect your wallet first\");\n      return;\n    }\n    try {\n      const signer = library.getSigner();\n      const tx = await signer.sendTransaction({\n        to: roomCode,\n        // You should replace this with a secure contract address\n        value: STAKE_AMOUNT\n      });\n      await tx.wait();\n      setStaked(true);\n      roomService.updatePlayerStake(roomCode, playerName, true);\n    } catch (error) {\n      console.error(\"Error staking amount:\", error);\n      alert(\"Failed to stake amount. Please try again.\");\n    }\n  };\n  const startRace = async () => {\n    if (players.some(player => player.selection === null)) {\n      alert('All players must select a cryptocurrency before starting the race!');\n      return;\n    }\n    if (players.some(player => !player.staked)) {\n      alert('All players must stake before starting the race!');\n      return;\n    }\n    setRaceStarted(true);\n    setWinner(null);\n    setTimeLeft(RACE_DURATION / 1000);\n    roomService.startRace(roomCode);\n    await fetchInitialPrices();\n  };\n  const fetchInitialPrices = async () => {\n    const selectedCryptos = players.map(player => player.selection);\n    const ids = [...new Set(selectedCryptos)].join(',');\n    try {\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd`);\n      const data = await response.json();\n      setCryptos(prevCryptos => prevCryptos.map(crypto => {\n        var _data$crypto$id, _data$crypto$id2;\n        return {\n          ...crypto,\n          position: 0,\n          startPrice: ((_data$crypto$id = data[crypto.id]) === null || _data$crypto$id === void 0 ? void 0 : _data$crypto$id.usd) || Math.random() * 1000,\n          currentPrice: ((_data$crypto$id2 = data[crypto.id]) === null || _data$crypto$id2 === void 0 ? void 0 : _data$crypto$id2.usd) || Math.random() * 1000\n        };\n      }));\n    } catch (error) {\n      console.error('Error fetching initial prices:', error);\n      setCryptos(prevCryptos => prevCryptos.map(crypto => ({\n        ...crypto,\n        position: 0,\n        startPrice: Math.random() * 1000,\n        currentPrice: Math.random() * 1000\n      })));\n    }\n  };\n  const updatePrices = () => {\n    setCryptos(prevCryptos => prevCryptos.map(crypto => {\n      if (players.some(player => player.selection === crypto.id)) {\n        const priceChange = (Math.random() - 0.5) * 2; // Random price change between -1% and 1%\n        const newPrice = crypto.currentPrice * (1 + priceChange / 100);\n        const totalChange = (newPrice - crypto.startPrice) / crypto.startPrice * 100;\n        const newPosition = Math.min(TRACK_LENGTH, Math.max(0, totalChange));\n        return {\n          ...crypto,\n          position: newPosition,\n          currentPrice: newPrice\n        };\n      }\n      return crypto;\n    }));\n  };\n  const endRace = async () => {\n    setRaceStarted(false);\n    const selectedCryptos = cryptos.filter(crypto => players.some(player => player.selection === crypto.id));\n    const winningCrypto = selectedCryptos.reduce((prev, current) => prev.position > current.position ? prev : current);\n    setWinner(winningCrypto);\n    const winningPlayers = players.filter(player => player.selection === winningCrypto.id);\n    if (winningPlayers.length > 0 && library) {\n      const totalStake = STAKE_AMOUNT.mul(players.length);\n      const winningShare = totalStake.div(winningPlayers.length);\n      for (const player of winningPlayers) {\n        try {\n          const signer = library.getSigner();\n          const tx = await signer.sendTransaction({\n            to: player.account,\n            // Assuming player.account holds the Ethereum address\n            value: winningShare\n          });\n          await tx.wait();\n          console.log(`Paid ${ethers.utils.formatEther(winningShare)} ETH to ${player.name}`);\n        } catch (error) {\n          console.error(`Error paying winner ${player.name}:`, error);\n        }\n      }\n    }\n    setPlayers(prevPlayers => prevPlayers.map(player => ({\n      ...player,\n      winner: player.selection === winningCrypto.id\n    })));\n  };\n  const selectCrypto = (playerName, cryptoId) => {\n    roomService.updatePlayerSelection(roomCode, playerName, cryptoId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex items-center justify-center bg-gray-900 text-cyan-300\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-8 bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full border border-cyan-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-4xl font-bold mb-6 text-center text-cyan-400 animate-pulse\",\n        children: \"Crypto Race 2077\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletConnection, {\n        onConnect: handleConnect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 text-center\",\n        children: [\"Room Code: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-bold text-pink-500\",\n          children: roomCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 flex justify-center space-x-4\",\n        children: [!staked && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stakeAmount,\n          className: \"px-6 py-3 bg-yellow-600 text-white rounded-full hover:bg-yellow-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-yellow-500/50\",\n          children: \"Stake 0.01 ETH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), isHost && !raceStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startRace,\n          className: \"px-6 py-3 bg-pink-600 text-white rounded-full hover:bg-pink-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-pink-500/50\",\n          children: \"Initiate Race\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), raceStarted && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-2xl font-semibold text-yellow-400\",\n          children: [\"Time left: \", timeLeft, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(CryptoChickenRace, \"E3txqLtIFic/ULuILHCiIZa2R6M=\");\n_c = CryptoChickenRace;\nexport default CryptoChickenRace;\nvar _c;\n$RefreshReg$(_c, \"CryptoChickenRace\");","map":{"version":3,"names":["React","useState","useEffect","roomService","WalletConnection","ethers","jsxDEV","_jsxDEV","RACE_DURATION","UPDATE_INTERVAL","TRACK_LENGTH","STAKE_AMOUNT","utils","parseEther","CryptoChickenRace","roomCode","playerName","isHost","_s","cryptos","setCryptos","players","setPlayers","raceStarted","setRaceStarted","winner","setWinner","timeLeft","setTimeLeft","account","setAccount","library","setLibrary","staked","setStaked","fetchCryptos","fetchedCryptos","fetchCryptocurrencies","map","crypto","position","startPrice","currentPrice","color","Math","floor","random","toString","interval","setInterval","updatedPlayers","getRoomPlayers","clearInterval","updatePrices","prevTime","endRace","handleConnect","stakeAmount","alert","signer","getSigner","tx","sendTransaction","to","value","wait","updatePlayerStake","error","console","startRace","some","player","selection","fetchInitialPrices","selectedCryptos","ids","Set","join","response","fetch","data","json","prevCryptos","_data$crypto$id","_data$crypto$id2","id","usd","priceChange","newPrice","totalChange","newPosition","min","max","filter","winningCrypto","reduce","prev","current","winningPlayers","length","totalStake","mul","winningShare","div","log","formatEther","name","prevPlayers","selectCrypto","cryptoId","updatePlayerSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onClick","_c","$RefreshReg$"],"sources":["F:/crypto-chicken-run/src/components/CryptoChickenRace.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as roomService from '../services/roomService';\r\nimport WalletConnection from './WalletConnection';\r\nimport { ethers } from \"ethers\";\r\n\r\nconst RACE_DURATION = 60000; // 60 seconds\r\nconst UPDATE_INTERVAL = 1000; // 1 second\r\nconst TRACK_LENGTH = 100;\r\nconst STAKE_AMOUNT = ethers.utils.parseEther(\"0.01\"); // 0.01 ETH stake\r\n\r\nconst CryptoChickenRace = ({ roomCode, playerName, isHost }) => {\r\n  const [cryptos, setCryptos] = useState([]);\r\n  const [players, setPlayers] = useState([]);\r\n  const [raceStarted, setRaceStarted] = useState(false);\r\n  const [winner, setWinner] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(RACE_DURATION / 1000);\r\n  const [account, setAccount] = useState(null);\r\n  const [library, setLibrary] = useState(null);\r\n  const [staked, setStaked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchCryptos = async () => {\r\n      const fetchedCryptos = await roomService.fetchCryptocurrencies();\r\n      setCryptos(fetchedCryptos.map(crypto => ({\r\n        ...crypto,\r\n        position: 0,\r\n        startPrice: 0,\r\n        currentPrice: 0,\r\n        color: `#${Math.floor(Math.random()*16777215).toString(16)}` // Random color\r\n      })));\r\n    };\r\n    fetchCryptos();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const updatedPlayers = roomService.getRoomPlayers(roomCode);\r\n      if (updatedPlayers) {\r\n        setPlayers(updatedPlayers);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [roomCode]);\r\n\r\n  useEffect(() => {\r\n    if (raceStarted) {\r\n      const interval = setInterval(() => {\r\n        updatePrices();\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            clearInterval(interval);\r\n            endRace();\r\n            return 0;\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n      }, UPDATE_INTERVAL);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [raceStarted]);\r\n\r\n  const handleConnect = (account, library) => {\r\n    setAccount(account);\r\n    setLibrary(library);\r\n  };\r\n\r\n  const stakeAmount = async () => {\r\n    if (!account || !library) {\r\n      alert(\"Please connect your wallet first\");\r\n      return;\r\n    }\r\n    try {\r\n      const signer = library.getSigner();\r\n      const tx = await signer.sendTransaction({\r\n        to: roomCode, // You should replace this with a secure contract address\r\n        value: STAKE_AMOUNT\r\n      });\r\n      await tx.wait();\r\n      setStaked(true);\r\n      roomService.updatePlayerStake(roomCode, playerName, true);\r\n    } catch (error) {\r\n      console.error(\"Error staking amount:\", error);\r\n      alert(\"Failed to stake amount. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const startRace = async () => {\r\n    if (players.some(player => player.selection === null)) {\r\n      alert('All players must select a cryptocurrency before starting the race!');\r\n      return;\r\n    }\r\n    if (players.some(player => !player.staked)) {\r\n      alert('All players must stake before starting the race!');\r\n      return;\r\n    }\r\n    setRaceStarted(true);\r\n    setWinner(null);\r\n    setTimeLeft(RACE_DURATION / 1000);\r\n    roomService.startRace(roomCode);\r\n    await fetchInitialPrices();\r\n  };\r\n\r\n  const fetchInitialPrices = async () => {\r\n    const selectedCryptos = players.map(player => player.selection);\r\n    const ids = [...new Set(selectedCryptos)].join(',');\r\n    try {\r\n      const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd`);\r\n      const data = await response.json();\r\n      \r\n      setCryptos(prevCryptos => \r\n        prevCryptos.map(crypto => ({\r\n          ...crypto,\r\n          position: 0,\r\n          startPrice: data[crypto.id]?.usd || Math.random() * 1000,\r\n          currentPrice: data[crypto.id]?.usd || Math.random() * 1000\r\n        }))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error fetching initial prices:', error);\r\n      setCryptos(prevCryptos => \r\n        prevCryptos.map(crypto => ({\r\n          ...crypto,\r\n          position: 0,\r\n          startPrice: Math.random() * 1000,\r\n          currentPrice: Math.random() * 1000\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const updatePrices = () => {\r\n    setCryptos(prevCryptos => \r\n      prevCryptos.map(crypto => {\r\n        if (players.some(player => player.selection === crypto.id)) {\r\n          const priceChange = (Math.random() - 0.5) * 2; // Random price change between -1% and 1%\r\n          const newPrice = crypto.currentPrice * (1 + priceChange / 100);\r\n          const totalChange = ((newPrice - crypto.startPrice) / crypto.startPrice) * 100;\r\n          const newPosition = Math.min(TRACK_LENGTH, Math.max(0, totalChange));\r\n          \r\n          return {\r\n            ...crypto,\r\n            position: newPosition,\r\n            currentPrice: newPrice,\r\n          };\r\n        }\r\n        return crypto;\r\n      })\r\n    );\r\n  };\r\n\r\n  const endRace = async () => {\r\n    setRaceStarted(false);\r\n    const selectedCryptos = cryptos.filter(crypto => \r\n      players.some(player => player.selection === crypto.id)\r\n    );\r\n    const winningCrypto = selectedCryptos.reduce((prev, current) => \r\n      (prev.position > current.position) ? prev : current\r\n    );\r\n    setWinner(winningCrypto);\r\n    \r\n    const winningPlayers = players.filter(player => player.selection === winningCrypto.id);\r\n    \r\n    if (winningPlayers.length > 0 && library) {\r\n      const totalStake = STAKE_AMOUNT.mul(players.length);\r\n      const winningShare = totalStake.div(winningPlayers.length);\r\n      \r\n      for (const player of winningPlayers) {\r\n        try {\r\n          const signer = library.getSigner();\r\n          const tx = await signer.sendTransaction({\r\n            to: player.account, // Assuming player.account holds the Ethereum address\r\n            value: winningShare\r\n          });\r\n          await tx.wait();\r\n          console.log(`Paid ${ethers.utils.formatEther(winningShare)} ETH to ${player.name}`);\r\n        } catch (error) {\r\n          console.error(`Error paying winner ${player.name}:`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    setPlayers(prevPlayers => \r\n      prevPlayers.map(player => ({\r\n        ...player,\r\n        winner: player.selection === winningCrypto.id\r\n      }))\r\n    );\r\n  };\r\n\r\n  const selectCrypto = (playerName, cryptoId) => {\r\n    roomService.updatePlayerSelection(roomCode, playerName, cryptoId);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-900 text-cyan-300\">\r\n      <div className=\"p-8 bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full border border-cyan-500\">\r\n        <h2 className=\"text-4xl font-bold mb-6 text-center text-cyan-400 animate-pulse\">Crypto Race 2077</h2>\r\n        <WalletConnection onConnect={handleConnect} />\r\n        <div className=\"mb-4 text-center\">Room Code: <span className=\"font-bold text-pink-500\">{roomCode}</span></div>\r\n        <div className=\"mb-6 flex justify-center space-x-4\">\r\n          {!staked && (\r\n            <button \r\n              onClick={stakeAmount} \r\n              className=\"px-6 py-3 bg-yellow-600 text-white rounded-full hover:bg-yellow-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-yellow-500/50\"\r\n            >\r\n              Stake 0.01 ETH\r\n            </button>\r\n          )}\r\n          {isHost && !raceStarted && (\r\n            <button \r\n              onClick={startRace} \r\n              className=\"px-6 py-3 bg-pink-600 text-white rounded-full hover:bg-pink-700 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-110 shadow-lg shadow-pink-500/50\"\r\n            >\r\n              Initiate Race\r\n            </button>\r\n          )}\r\n          {raceStarted && <span className=\"text-2xl font-semibold text-yellow-400\">Time left: {timeLeft}s</span>}\r\n        </div>\r\n        {/* Rest of the component remains the same */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CryptoChickenRace;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}